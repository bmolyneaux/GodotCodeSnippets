[_ready]

body="func _ready() -> void:
	"
additional_info=""

[_enter_tree]

body="func _enter_tree() -> void:
	"
additional_info=""

[_exit_tree]

body="func _exit_tree() -> void:
	"
additional_info=""

[_physics_process]

body="func _physics_process(delta : float) -> void:
	"
additional_info=" (delta : float)"

[_process]

body="func _process(delta : float) -> void:
	"
additional_info=" (delta : float)"

[_input]

body="func _input(event : InputEvent) -> void:
	"
additional_info=" (event : InputEvent)"

[_unhandled_input]

body="func _unhandled_input(event : InputEvent) -> void:
	"
additional_info=" (event : InputEvent)"

[_unhandled_key_input]

body="func _unhandled_key_input(event : InputEventKey) -> void:
	"
additional_info=" (event : InputEventKey)"

[_gui_input]

body="func _gui_input(event : InputEvent) -> void:
	"
additional_info=" (event : InputEvent)"

[_draw]

body="func _draw() -> void:
	"
additional_info=""

[delay]

body="yield(get_tree().create_timer([@1]), \"timeout\")"
additional_info="Delay for one second"
other_info="Can a parametrize a snippet?"

[preload]

body="var [@1] = preload([@2]"

[load]

body="load([@1]).instance() as [@9]"

[add_child]

body="add_child([@1].new())[@2]"

[change_scene]

body="get_tree().change_scene()"

[node_path]

body="export var [@1]_path: = NodePath()
onready var [@1]: Node = get_node([@1]_path)[@2]"

[keypress]

body="if event is InputEventKey:
	event = event as InputEventKey
	if event.scancode == KEY_[@1] and event.pressed:
		[@2]"

[example_groups]

body="# Add this node to my_group
add_to_group(\"my_group\")
# Assert that my_group exists
assert(get_tree().has_group(\"my_group\"))
# Assert that this node is in my_group
assert(self in get_tree().get_nodes_in_group(\"my_group\"))

# Call my_function on my_group
get_tree().call_group(\"my_group\", \"my_function\")

# Call _notification() on nodes in my_group in scene order
# Auto-complete NOTIFICATION_ for options
get_tree().notify_group(\"my_group\", NOTIFICATION_CRASH)
# Flags are GROUP_CALL_REVERSE, GROUP_CALL_REALTIME, GROUP_CALL_UNIQUE
get_tree().notify_group_flags(SceneTree.GROUP_CALL_REVERSE, \"my_group\", NOTIFICATION_CRASH)
# GROUP_CALL_REALTIME will cause the flag to be set immediately, whereas the other set, call, and notify will be deferred.
get_tree().set_group_flags(SceneTree.GROUP_CALL_REALTIME, \"my_group\", \"my_property\", 42)

# Set my_property to 0 on nodes in my_group
get_tree().set_group(\"my_group\", \"my_property\", 0)
# Note that this set will be deferred, ie:
assert(my_property == 42)
yield(get_tree(), \"idle_frame\")
assert(my_property == 0)"
